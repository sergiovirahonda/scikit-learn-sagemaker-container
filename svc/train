#!/usr/bin/env python3.6

# A sample training component that trains a simple scikit-learn SVC model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback
import numpy as np
import pandas as pd

from sklearn.svm import SVC
from sklearn.feature_extraction.text import TfidfVectorizer

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Take the set of files and read them all into a single pandas dataframe
        input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        if len(input_files) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
        raw_data = [ pd.read_csv(file, header=None) for file in input_files ]
        train_data = pd.concat(raw_data)

        # labels are in the first column
        train_y = train_data.ix[:,0]
        train_X = train_data.ix[:,1:]

        #Implemeting TFIDF Vectorizer to vectorize the data
        vect = TfidfVectorizer(min_df=5,ngram_range=(2,5)).fit(train_X)
        train_X_vectorized = vect.transform(train_X)

        # Now use scikit-learn's decision tree classifier to train the model.
        clf = SVC(C=100,gamma= 0.1,kernel='rbf')
        clf = clf.fit(train_X_vectorized, train_y)

        # saving the vectorizer and model
        with open(os.path.join(model_path, 'tfidf.pkl'), 'wb') as out:
            pickle.dump(vect, out, protocol=0)
        print('Vectorizer saved.')

        with open(os.path.join(model_path, 'SVC.pkl'), 'wb') as out:
            pickle.dump(clf, out, protocol=0)
        print('Model saved. Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
